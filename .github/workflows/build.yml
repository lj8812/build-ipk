name: OpenClash AutoBuild (Master Branch)

on:
  push:
    paths:
      - '.github/workflows/*.yml'
    branches: [ "master" ]
  
  schedule:
    - cron: '0 12 * * 1'  # 每周一UTC中午12点自动构建

  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (x86/64, arm/armv7等)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt版本'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo核心版本 (带v前缀)'
        required: true
        default: 'v1.18.0'

env:
  BUILD_DIR: ${{ github.workspace }}/openwrt-build
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: 🛠️ 初始化环境
      run: |
        mkdir -p $BUILD_DIR
        echo "构建开始时间: $(date +'%Y-%m-%d %H:%M:%S %Z')"

    - name: 🔍 解析目标架构
      run: |
        case "${{ github.event.inputs.target }}" in
          "x86/64")    ARCH="amd64"; TARGET_CFG="x86_64" ;;
          "arm/armv7") ARCH="armv7"; TARGET_CFG="armv7" ;;
          "armvirt/64") ARCH="armv8"; TARGET_CFG="armvirt" ;;
          *)            ARCH="amd64"; TARGET_CFG="generic" ;;
        esac
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "TARGET_CFG=$TARGET_CFG" >> $GITHUB_ENV

    - name: 📦 下载OpenWrt SDK
      run: |
        SDK_PATH="releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}"
        SDK_URL="https://downloads.openwrt.org/$SDK_PATH"
        
        echo "🔎 查找最新SDK文件..."
        SDK_FILE=$(curl -sL "$SDK_URL" | grep -oE 'openwrt-sdk-.*?Linux-x86_64\.tar\.xz' | head -1)
        
        echo "🔗 下载地址: $SDK_URL/$SDK_FILE"
        curl --retry 3 --retry-delay 10 -L -o sdk.tar.xz "$SDK_URL/$SDK_FILE"
        
        echo "🔒 验证压缩包..."
        xz -t sdk.tar.xz || (echo "::error::文件校验失败"; exit 1)
        
        echo "📂 解压到 $BUILD_DIR"
        tar -xJf sdk.tar.xz -C $BUILD_DIR --strip-components=1
        rm -f sdk.tar.xz

    - name: 💾 获取插件源码
      run: |
        cd $BUILD_DIR
        echo "⬇️ 正在克隆 master 分支..."
        git clone --depth 1 --branch master \
          https://github.com/vernesong/OpenClash package/$PLUGIN_NAME || {
            echo "::error::仓库克隆失败，请检查网络或分支名称"
            exit 1
          }
        
        cd package/$PLUGIN_NAME/$PLUGIN_NAME
        echo "🔧 修复Makefile格式..."
        sed -i 's/^    /\t/g' Makefile
        [ -f "Makefile" ] || { echo "::error::Makefile不存在"; exit 1; }

    - name: ⚙️ 预置核心文件
      run: |
        CORE_DIR="$BUILD_DIR/package/$PLUGIN_NAME/$PLUGIN_NAME/files/etc/openclash/core"
        mkdir -p $CORE_DIR
        
        echo "⬇️ 下载mihomo核心 (架构: $ARCH)..."
        CORE_URL="https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core }}/mihomo-linux-$ARCH.gz"
        
        if ! curl -sL "$CORE_URL" | gunzip > "$CORE_DIR/clash"; then
          echo "::error::核心下载失败，请检查版本和架构匹配"
          exit 1
        fi
        chmod 755 "$CORE_DIR/clash"

    - name: 🏗️ 配置编译环境
      run: |
        cd $BUILD_DIR
        cat << EOF > .config
        CONFIG_TARGET_${TARGET_CFG}=y
        CONFIG_PACKAGE_${PLUGIN_NAME}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        make defconfig

    - name: 🚀 执行编译
      run: |
        cd $BUILD_DIR
        echo "🛠️ 开始编译 (使用 $(nproc) 线程)..."
        make -j$(nproc) V=s \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/${PLUGIN_NAME}/compile

    - name: 📤 整理输出文件
      run: |
        OUTPUT_DIR="${{ github.workspace }}/artifacts"
        mkdir -p $OUTPUT_DIR
        
        # 收集所有ipk文件
        find $BUILD_DIR/bin -name '*.ipk' -exec cp {} $OUTPUT_DIR \;
        
        # 生成校验文件
        cd $OUTPUT_DIR
        sha256sum *.ipk > SHA256SUMS
        echo "构建信息:" > build-info.txt
        echo "目标架构: ${{ github.event.inputs.target }}" >> build-info.txt
        echo "OpenWrt版本: ${{ github.event.inputs.firmware_version }}" >> build-info.txt
        echo "核心版本: ${{ github.event.inputs.clash_core }}" >> build-info.txt
        echo "编译时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build-info.txt

    - name: 🚢 发布版本
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*.ipk
          artifacts/SHA256SUMS
          artifacts/build-info.txt
        tag_name: openclash-${{ github.event.inputs.clash_core }}-$(date +%m%d)
        name: OpenClash ${{ github.event.inputs.clash_core }} Build
        body: |
          ### 构建信息
          - ​**架构**: `${{ github.event.inputs.target }}`
          - ​**OpenWrt版本**: `${{ github.event.inputs.firmware_version }}`
          - ​**核心版本**: `${{ github.event.inputs.clash_core }}`
          - ​**编译时间**: `$(date -u +"%Y-%m-%dT%H:%M:%SZ")`

          ### 安装说明
          ```bash
          opkg install luci-app-openclash_*.ipk
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
