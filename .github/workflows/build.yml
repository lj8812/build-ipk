name: 编译 OpenClash 插件

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (x86/64 或 armvirt/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt 版本 (如 23.05.5)'
        required: true
        default: '23.05.5'
      clash_core_version:
        description: 'mihomo 内核版本 (带 v 前缀)'
        required: true
        default: 'v1.18.0'

env:
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 120

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 安装依赖工具链
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq \
          build-essential ccache ecj fastjar file g++ gawk gettext git \
          libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-distutils python3-setuptools unzip wget rsync subversion \
          swig time xsltproc zlib1g-dev tree jq lua5.1 lua5.1-dev \
          ncurses-term  # 新增终端支持

    - name: 设置 Python 环境
      run: |
        sudo ln -sf /usr/bin/python3 /usr/bin/python
        python --version

    - name: 解析目标参数
      id: parse_target
      run: |
        TARGET_DASH=$(echo "${{ github.event.inputs.target }}" | sed 's/\//-/g')
        echo "TARGET_DASH=$TARGET_DASH" >> $GITHUB_OUTPUT
        
        case "${{ github.event.inputs.target }}" in
          "x86/64")    ARCH="amd64"  ;;
          "armvirt/64") ARCH="arm64" ;;
          *) echo "::error::不支持的架构"; exit 1 ;;
        esac
        echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

    - name: 下载 OpenWrt SDK
      run: |
        SDK_BASE_URL="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}/"
        SDK_FILE=$(curl -s "$SDK_BASE_URL" | grep -oP "openwrt-sdk-.*?-${{ steps.parse_target.outputs.TARGET_DASH }}_gcc-.*?Linux-x86_64.tar.xz" | head -n1)

        mkdir -p openwrt
        wget --tries=3 "${SDK_BASE_URL}${SDK_FILE}" -O openwrt-sdk.tar.xz
        tar -xJf openwrt-sdk.tar.xz -C openwrt --strip-components 1
        rm openwrt-sdk.tar.xz

    - name: 准备插件源码
      working-directory: openwrt/package
      run: |
        git clone --depth 1 --branch master https://github.com/vernesong/OpenClash.git ${{ env.PLUGIN_NAME }}
        
        cd ${{ env.PLUGIN_NAME }}/luci-app-openclash
        sed -i -e 's/^    /\t/g' -e 's/\r$//' Makefile

        # 预置 mihomo 内核
        CORE_DIR="files/etc/openclash/core"
        mkdir -p $CORE_DIR
        ARCH=${{ steps.parse_target.outputs.ARCH }}

        CORE_URLS=(
          "https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core_version }}/mihomo-linux-$ARCH-${{ github.event.inputs.clash_core_version }}.gz"
          "https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core_version }}/mihomo-linux-$ARCH.gz"
        )

        for url in "${CORE_URLS[@]}"; do
          if curl --output /dev/null --silent --head --fail "$url"; then
            wget -q "$url" -O clash.gz
            gunzip clash.gz
            mv clash $CORE_DIR/
            chmod 755 $CORE_DIR/clash
            break
          fi
        done

    - name: 配置编译环境
      working-directory: openwrt
      env:
        TERM: xterm-256color  # 设置终端类型
      run: |
        # 强制更新 feeds 并安装必要组件
        ./scripts/feeds update -a -f
        ./scripts/feeds install -a -f luci

        # 生成最小化配置
        cat << EOF > .config
        CONFIG_TARGET_$(echo ${{ github.event.inputs.target }} | tr '/a-z' '_A-Z')=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_iptables-mod-tproxy=y
        CONFIG_PACKAGE_luci-compat=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-lib-base=y
        CONFIG_TERM="xterm-256color"  # 终端类型配置
        EOF

        # 生成确定性配置
        make defconfig CONFIG_DEFAULT_DESIGNATED=y

        # 预编译工具链 (非交互式)
        make -j$(nproc) tools/install
        make -j$(nproc) toolchain/install

    - name: 执行编译
      working-directory: openwrt
      env:
        TERM: dumb  # 禁用终端交互
        STAGING_DIR: ${{ github.workspace }}/openwrt/staging_dir
      run: |
        export PATH="$STAGING_DIR/host/bin:$PATH"
        
        # 非交互式编译
        make -j$(($(nproc) + 1)) package/${{ env.PLUGIN_NAME }}/compile \
          V=s \
          FORCE_UNSAFE_CONFIGURE=1 \
          DEBIAN_FRONTEND=noninteractive \
          TERM=dumb

    - name: 打包输出
      run: |
        ARTIFACT_DIR="openclash_${{ steps.parse_target.outputs.TARGET_DASH }}_${{ github.event.inputs.firmware_version }}_${{ github.event.inputs.clash_core_version }}"
        mkdir -p $ARTIFACT_DIR
        find openwrt/bin/packages -name "luci-app-openclash*.ipk" -exec cp -v {} $ARTIFACT_DIR/ \;

    - name: 上传制品
      uses: actions/upload-artifact@v4
      with:
        name: openclash-packages
        path: openclash_*/*.ipk

    - name: 创建 Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: openclash-${{ steps.parse_target.outputs.TARGET_DASH }}-${{ github.event.inputs.firmware_version }}
        files: openclash_*/*.ipk
