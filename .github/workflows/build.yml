name: OpenClash Stable Builder

on:
  push:
    paths:
      - '**.yml'
      - '**.yaml'
    branches: [ "main", "master" ]

  workflow_dispatch:
    inputs:
      target:
        description: 'Target Architecture (e.g. x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt Version'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo Core Version (with v prefix)'
        required: true
        default: 'v1.18.0'

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 50
    env:
      PLUGIN_NAME: luci-app-openclash

    steps:
    # ===================== 初始化阶段 =====================
    - name: 🏗️ Initialize Workspace
      run: |
        # 定义路径变量（正确使用上下文）
        BUILD_DIR="${{ github.workspace }}/openwrt-build"
        CACHE_DIR="${{ runner.temp }}/sdk_cache"
        mkdir -p $BUILD_DIR $CACHE_DIR
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "CACHE_DIR=$CACHE_DIR" >> $GITHUB_ENV

    # ===================== 依赖安装 =====================
    - name: 📦 Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          aria2 xz-utils ccache \
          build-essential git python3 \
          libncurses-dev zlib1g-dev

    # ===================== 架构解析 =====================
    - name: 🔍 Parse Target Architecture
      run: |
        case "${{ inputs.target }}" in
          "x86/64")
            TARGET_CFG="x86_64"
            ARCH="amd64"
            ;;
          "arm/armv7")
            TARGET_CFG="armv7"
            ARCH="armv7"
            ;;
          "armvirt/64")
            TARGET_CFG="armvirt"
            ARCH="armv8"
            ;;
          *)
            TARGET_CFG="generic"
            ARCH="amd64"
            ;;
        esac
        echo "TARGET_CFG=$TARGET_CFG" >> $GITHUB_ENV
        echo "ARCH=$ARCH" >> $GITHUB_ENV

name: OpenClash Stable Builder

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (示例: x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt版本'
        required: true
        default: '23.05.5'

env:
  CACHE_DIR: ${{ runner.temp }}/sdk_cache
  BUILD_DIR: ${{ github.workspace }}/openwrt-build

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    # ===================== 初始化阶段 =====================
    - name: 🛠️ 初始化环境
      run: |
        mkdir -p "$BUILD_DIR" "$CACHE_DIR"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    # ===================== 版本解析 =====================
    - name: 🔍 预处理参数
      run: |
        # 转换架构格式 x86/64 → x86-64
        formatted_target="${INPUT_TARGET//\//-}"
        # 提取主版本号 23.05.5 → 23.05
        firmware_major="${INPUT_FIRMWARE_VERSION%.*}"
        
        echo "FORMATTED_TARGET=$formatted_target" >> $GITHUB_ENV
        echo "FIRMWARE_MAJOR=$firmware_major" >> $GITHUB_ENV

    # ===================== 下载阶段 =====================
    - name: 🌐 智能下载SDK
      env:
        MIRRORS: >
          https://downloads.openwrt.org,
          https://mirror.sjtu.edu.cn/openwrt,
          https://mirrors.tuna.tsinghua.edu.cn/openwrt
      run: |
        # 定义文件名匹配模式
        patterns=(
          "openwrt-sdk-${INPUT_FIRMWARE_VERSION}-${FORMATTED_TARGET}_*"
          "openwrt-sdk-${FIRMWARE_MAJOR}-*-${FORMATTED_TARGET}_*"
        )

        # 多源多模式尝试
        for mirror in ${MIRRORS//,/ }; do
          for pattern in "${patterns[@]}"; do
            full_url="${mirror}/releases/${INPUT_FIRMWARE_VERSION}/targets/${INPUT_TARGET}/${pattern}"
            echo "🔗 尝试下载: $full_url"
            
            if aria2c -x8 -s8 --file-allocation=none -o "$CACHE_DIR/temp.tar.xz" "$full_url"; then
              if xz -t "$CACHE_DIR/temp.tar.xz"; then
                mv "$CACHE_DIR/temp.tar.xz" "$CACHE_DIR/sdk.tar.xz"
                echo "✅ 验证通过: ${full_url##*/}"
                exit 0
              fi
            fi
          done
        done

        echo "::error::所有下载源均失败"
        exit 1

    # ===================== 后续步骤 =====================
    # ... [保留原有的编译和发布步骤] ...

    # ===================== 源码准备 =====================
    - name: 💾 Prepare Source Code
      run: |
        # 解压SDK
        tar -xJf "${{ env.CACHE_DIR }}/sdk.tar.xz" -C ${{ env.BUILD_DIR }} --strip-components=1

        # 克隆插件源码
        cd ${{ env.BUILD_DIR }}
        git clone --depth 1 --branch master \
          https://github.com/vernesong/OpenClash package/${{ env.PLUGIN_NAME }}

        # 修复Makefile
        find package/${{ env.PLUGIN_NAME }} -name Makefile -exec sed -i 's/^    /\t/g' {} +

    # ===================== 编译配置 =====================
    - name: ⚙️ Configure Build
      run: |
        cd ${{ env.BUILD_DIR }}
        cat > .config <<EOF
        CONFIG_TARGET_${TARGET_CFG}=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        make defconfig

    # ===================== 执行编译 =====================
    - name: 🛠️ Compile Package
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(($(nproc) + 2)) \
          V=sc \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/${{ env.PLUGIN_NAME }}/compile

    # ===================== 发布产物 =====================
    - name: 🚀 Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.BUILD_DIR }}/bin/packages/**/*.ipk
        tag_name: openclash-${{ inputs.clash_core }}-$(date +%Y%m%d)
        name: OpenClash ${{ inputs.clash_core }} Build
        body: |
          ### Build Info
          - ​**Target**: ${{ inputs.target }}
          - ​**OpenWrt**: ${{ inputs.firmware_version }}
          - ​**Core**: ${{ inputs.clash_core }}
          - ​**Timestamp**: `$(date -u +'%Y-%m-%dT%H:%M:%SZ')`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ===================== 错误处理 =====================
    - name: 🚨 Error Notification
      if: ${{ failure() }}
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `❗ Build Failed!\n
              Job: ${context.job}\n
              Error: ${{ join(toJson(steps.*.conclusion)) }}\n
              Logs: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })
