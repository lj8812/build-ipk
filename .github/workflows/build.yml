name: OpenClash AutoBuild (Auto-Trigger)

on:
  # 自动触发条件
  push:
    branches: [ "main", "master" ]
    paths:
      - 'package/**'
      - '!**.md'
  
  # 每周一中午12点自动构建 (UTC时间)
  schedule:
    - cron: '0 12 * * 1'

  # 手动触发配置
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (示例: x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt版本'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo核心版本 (带v前缀)'
        required: true
        default: 'v1.18.0'

env:
  BUILD_DIR: ${{ github.workspace }}/openwrt-build
  PLUGIN_NAME: luci-app-openclash
  AUTO_MODE: ${{ github.event_name != 'workflow_dispatch' }}

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: 🛠️ 初始化工作区
      if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
      run: |
        mkdir -p $BUILD_DIR
        echo "BUILD_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

    # 参数自动检测逻辑
    - name: 🔍 自动检测参数
      if: ${{ env.AUTO_MODE == 'true' }}
      run: |
        # 从commit message中提取参数
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        
        # 架构检测
        if [[ "$COMMIT_MSG" =~ \[ARM ]]; then
          echo "TARGET=arm/armv7" >> $GITHUB_ENV
        elif [[ "$COMMIT_MSG" =~ \[RISCV ]]; then
          echo "TARGET=riscv/64" >> $GITHUB_ENV
        else
          echo "TARGET=x86/64" >> $GITHUB_ENV
        fi

        # 版本检测
        if [[ "$COMMIT_MSG" =~ FW_VER=[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "FIRMWARE_VER=${BASH_REMATCH[0]#*=}" >> $GITHUB_ENV
        else
          echo "FIRMWARE_VER=23.05.5" >> $GITHUB_ENV
        fi

        if [[ "$COMMIT_MSG" =~ CORE_VER=v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "CORE_VER=${BASH_REMATCH[0]}" >> $GITHUB_ENV
        else
          echo "CORE_VER=v1.18.0" >> $GITHUB_ENV
        fi

    # 手动模式参数处理
    - name: 📝 获取手动输入
      if: ${{ env.AUTO_MODE == 'false' }}
      run: |
        echo "TARGET=${{ github.event.inputs.target }}" >> $GITHUB_ENV
        echo "FIRMWARE_VER=${{ github.event.inputs.firmware_version }}" >> $GITHUB_ENV
        echo "CORE_VER=${{ github.event.inputs.clash_core }}" >> $GITHUB_ENV

    # 公共构建流程
    - name: 📦 下载SDK
      run: |
        SDK_BASE="https://downloads.openwrt.org/releases/${{ env.FIRMWARE_VER }}/targets/${{ env.TARGET }}"
        
        # 智能SDK检测
        SDK_FILE=$(
          curl -sfL "$SDK_BASE/" | 
          grep -oE 'openwrt-sdk-[^"]+Linux-x86_64\.tar\.xz' |
          sort -V | tail -1
        ) || echo "::warning::使用备用匹配方案"

        [ -z "$SDK_FILE" ] && SDK_FILE="openwrt-sdk-${{ env.FIRMWARE_VER }}-$(echo ${{ env.TARGET }} | tr '/' '-')_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "🔗 SDK下载地址: $SDK_BASE/$SDK_FILE"
        curl --retry 3 --retry-all-errors -fL -o sdk.tar.xz "$SDK_BASE/$SDK_FILE"
        
        # 文件验证
        {
          echo "🔬 文件类型检查..." &&
          file -b sdk.tar.xz | grep "XZ compressed data" &&
          echo "🧪 完整性验证..." &&
          xz -tvv sdk.tar.xz
        } || {
          echo "::error::文件验证失败"
          exit 1
        }

        tar -xJf sdk.tar.xz -C $BUILD_DIR --strip-components=1
        rm -f sdk.tar.xz

    - name: 💾 准备插件源码
      run: |
        cd $BUILD_DIR
        git clone --depth 1 --branch ${{ github.ref_name || 'master' }} \
          https://github.com/vernesong/OpenClash package/$PLUGIN_NAME
        
        # 自动修复Makefile
        cd package/$PLUGIN_NAME/$PLUGIN_NAME
        sed -i 's/^    /\t/g' Makefile
        [ -f "Makefile" ] || { echo "::error::Makefile缺失"; exit 1; }

    - name: ⚙️ 预置核心文件
      run: |
        CORE_DIR="$BUILD_DIR/package/$PLUGIN_NAME/$PLUGIN_NAME/files/etc/openclash/core"
        mkdir -p $CORE_DIR
        
        # 多镜像源下载
        MIRRORS=(
          "https://github.com/MetaCubeX/mihomo/releases/download/${{ env.CORE_VER }}/mihomo-linux-$(echo ${{ env.TARGET }} | sed 's/x86\/64/amd64/; s/arm\/armv7/armv7/; s/riscv\/64/riscv64/').gz"
          "https://mirror.ghproxy.com/https://github.com/MetaCubeX/mihomo/releases/download/${{ env.CORE_VER }}/mihomo-linux-$(echo ${{ env.TARGET }} | sed 's/x86\/64/amd64/; s/arm\/armv7/armv7/; s/riscv\/64/riscv64/').gz"
        )

        for url in "${MIRRORS[@]}"; do
          if curl -sfL "$url" | gunzip > "$CORE_DIR/clash"; then
            chmod 755 "$CORE_DIR/clash"
            echo "✅ 核心文件下载成功: $url"
            break
          fi
        done

        [ -x "$CORE_DIR/clash" ] || { echo "::error::核心文件获取失败"; exit 1; }

    - name: 🏗️ 编译插件
      run: |
        cd $BUILD_DIR
        cat << EOF > .config
        CONFIG_TARGET_$(echo ${{ env.TARGET }} | tr '/a-z-' 'A-Z_')=y
        CONFIG_PACKAGE_${PLUGIN_NAME}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        
        make defconfig
        make -j$(($(nproc) + 2)) V=s package/${PLUGIN_NAME}/compile

    - name: 🚀 发布产物
      uses: softprops/action-gh-release@v2
      with:
        files: |
          $BUILD_DIR/bin/packages/**/*.ipk
        tag_name: openclash-${{ env.CORE_VER }}-$(date +%Y%m%d)
        name: OpenClash ${{ env.CORE_VER }} Build
        body: |
          ### 构建信息
          | 参数          | 值                      |
          |---------------|-------------------------|
          | 触发方式      | ${{ github.event_name }} |
          | 目标架构      | ${{ env.TARGET }}       |
          | OpenWrt版本   | ${{ env.FIRMWARE_VER }} |
          | 核心版本      | ${{ env.CORE_VER }}     |
          | 构建时间      | $(date -u +"%Y-%m-%dT%H:%M:%SZ") |

          ### 使用指南
          1. 通过SSH上传ipk文件到路由器
          2. 运行安装命令： 
             ```bash
             opkg install ./luci-app-openclash_*.ipk
             ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
