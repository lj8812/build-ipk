name: 编译 OpenClash 插件

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (x86/64 或 armvirt/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt 版本 (如 23.05.5)'
        required: true
        default: '23.05.5'
      clash_core_version:
        description: 'Clash.Meta 内核版本 (带 v 前缀)'
        required: true
        default: 'v1.18.0'

env:
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 90

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 安装依赖工具链
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq \
          build-essential ccache ecj fastjar file g++ gawk gettext git \
          libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-distutils python3-setuptools unzip wget rsync subversion \
          swig time xsltproc zlib1g-dev tree jq

    - name: 设置 Python 环境
      run: |
        sudo rm /usr/bin/python
        sudo ln -s /usr/bin/python3 /usr/bin/python
        python --version

    - name: 解析目标参数
      id: parse_target
      run: |
        TARGET_SLUG=$(echo "${{ github.event.inputs.target }}" | sed 's/\//-/g')
        echo "TARGET_SLUG=$TARGET_SLUG" >> $GITHUB_OUTPUT
        
        case "${{ github.event.inputs.target }}" in
          "x86/64")    ARCH="amd64"  ;;
          "armvirt/64") ARCH="arm64" ;;
          *) echo "::error::不支持的架构"; exit 1 ;;
        esac
        echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

    - name: 下载 OpenWrt SDK
      run: |
        SDK_BASE="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}/"
        echo "🛠️ SDK 基地址: $SDK_BASE"

        # 精确匹配 SDK 文件名
        SDK_FILE=$(curl -sL "$SDK_BASE" | grep -oP 'openwrt-sdk-[\d\.]+-\w+-\d+.*?(?=")\.tar\.xz' | head -n1)
        if [ -z "$SDK_FILE" ]; then
          echo "::error::❌ 未找到 SDK 文件，请检查地址: $SDK_BASE"
          exit 1
        fi
        echo "✅ 确认 SDK 文件: $SDK_FILE"

        # 完整 URL 构建
        FULL_URL="${SDK_BASE}${SDK_FILE}"
        echo "🔗 下载地址: $FULL_URL"

        # 带重试的下载
        for i in {1..3}; do
          if wget -q --show-progress --progress=bar:force:noscroll "$FULL_URL" -O sdk.tar.xz; then
            echo "✅ 下载成功"
            break
          else
            echo "⚠️ 第 $i 次下载失败，正在重试..."
            sleep 5
          fi
        done

        # 解压校验
        if ! tar -xJf sdk.tar.xz -C openwrt --strip-components 1; then
          echo "::error::❌ SDK 文件损坏，请检查: $FULL_URL"
          exit 1
        fi
        rm sdk.tar.xz

    - name: 准备插件源码
      working-directory: openwrt/package
      run: |
        git clone --depth 1 --branch master https://github.com/vernesong/OpenClash.git ${{ env.PLUGIN_NAME }}
        
        cd ${{ env.PLUGIN_NAME }}/luci-app-openclash
        # 修复 Makefile 格式
        sed -i -e 's/^    /\t/g' -e 's/\r$//' Makefile

        # 预置 Clash.Meta 内核
        CORE_DIR="files/etc/openclash/core"
        mkdir -p $CORE_DIR
        CORE_PREFIX="clash.meta"
        
        # 动态生成下载 URL
        CORE_URLS=(
          "https://github.com/MetaCubeX/Clash.Meta/releases/download/${{ github.event.inputs.clash_core_version }}/$CORE_PREFIX-linux-${{ steps.parse_target.outputs.ARCH }}.gz"
          "https://github.com/MetaCubeX/Clash.Meta/releases/download/${{ github.event.inputs.clash_core_version }}/$CORE_PREFIX-${{ steps.parse_target.outputs.ARCH }}.gz"
        )

        for url in "${CORE_URLS[@]}"; do
          echo "🔍 尝试下载: $url"
          if wget -q --spider "$url"; then
            echo "✅ 有效链接: $url"
            wget -q --show-progress "$url" -O clash.gz
            gunzip clash.gz && break
          fi
        done

        mv clash $CORE_DIR/
        chmod 755 $CORE_DIR/clash

        # 禁用自动更新
        CONFIG_FILE="root/etc/config/openclash"
        sed -i -e 's/option auto_update .*/option auto_update "0"/' \
               -e 's/option release_branch .*/option release_branch "disabled"/' $CONFIG_FILE

    - name: 配置编译环境
      working-directory: openwrt
      run: |
        cat << EOF > .config
        CONFIG_TARGET_$(echo ${{ github.event.inputs.target }} | tr '/a-z' '_A-Z')=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_iptables-mod-tproxy=y
        CONFIG_PACKAGE_luci-compat=y
        EOF
        
        make defconfig
        grep -r "CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}" .config

    - name: 执行编译
      working-directory: openwrt
      run: |
        export PATH="$PATH:$GITHUB_WORKSPACE/openwrt/staging_dir/host/bin"
        make -j$(($(nproc) + 1)) package/${{ env.PLUGIN_NAME }}/compile V=sc 2>&1 | tee build.log
        
        # 编译结果检查
        if ! grep -q "package/${{ env.PLUGIN_NAME }}/compile: Finished" build.log; then
          echo "::error::❌ 编译失败，查看日志:"
          cat build.log | grep error:
          exit 1
        fi

    - name: 打包输出
      run: |
        ARTIFACT_DIR="openclash_${{ steps.parse_target.outputs.TARGET_SLUG }}_${{ github.event.inputs.firmware_version }}_${{ github.event.inputs.clash_core_version }}"
        mkdir -p $ARTIFACT_DIR
        
        find openwrt/bin/packages -name "*.ipk" -exec cp -v {} $ARTIFACT_DIR/ \;
        echo "📦 生成文件列表:"
        ls -lh $ARTIFACT_DIR

    - name: 上传制品
      uses: actions/upload-artifact@v4
      with:
        name: openclash-packages
        path: |
          openclash_*
          !*.tmp
        retention-days: 7

    - name: 创建 Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: openclash-${{ steps.parse_target.outputs.TARGET_SLUG }}-${{ github.event.inputs.firmware_version }}
        name: OpenClash ${{ github.event.inputs.clash_core_version }} (${{ github.event.inputs.target }})
        body: |
          ### 🚀 编译信息
          - ​**架构**: `${{ github.event.inputs.target }}`
          - ​**OpenWrt**: ${{ github.event.inputs.firmware_version }}
          - ​**Clash.Meta**: ${{ github.event.inputs.clash_core_version }}
          - ​**编译时间**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          ### 📥 安装说明
          ```bash
          opkg install luci-app-openclash_*.ipk
          ```
        files: openclash_*/*.ipk
