name: OpenClash AutoBuild with Core

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target Architecture (e.g. x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt Version'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo Core Version (with v prefix)'
        required: true
        default: 'v1.18.0'
      plugin_branch:
        description: 'Plugin Source Branch'
        required: true
        default: 'master'

env:
  BUILD_DIR: ${{ github.workspace }}/openwrt-build
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: üèóÔ∏è Initialize Workspace
      run: |
        mkdir -p $BUILD_DIR
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    - name: üì¶ Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ccache ecj fastjar file g++ gawk gettext git \
          libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-distutils python3-setuptools unzip wget rsync subversion \
          swig time xsltproc zlib1g-dev tree jq p7zip-full upx-ucl

    - name: üîç Parse Target Architecture
      id: target_parser
      run: |
        case "${{ github.event.inputs.target }}" in
          "x86/64")       ARCH="amd64"; TARGET_NAME="x86_64" ;;
          "armvirt/64")   ARCH="armv8"; TARGET_NAME="armvirt" ;;
          "arm64")        ARCH="armv8"; TARGET_NAME="arm64" ;;
          "arm/armv7")    ARCH="armv7"; TARGET_NAME="armv7" ;;
          "mips/mips32")  ARCH="mips"; TARGET_NAME="mips32" ;;
          "mips/mips64")  ARCH="mips64"; TARGET_NAME="mips64" ;;
          "riscv/64")     ARCH="riscv64"; TARGET_NAME="riscv64" ;;
          *)              ARCH="amd64"; TARGET_NAME="generic" ;;
        esac

        TARGET_DASH=$(echo "${{ github.event.inputs.target }}" | tr '/' '-')
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "TARGET_DASH=$TARGET_DASH" >> $GITHUB_ENV
        echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV

    - name: üîí Core Version Validation
      run: |
        CORE_API="https://api.github.com/repos/MetaCubeX/mihomo/releases/tags/${{ github.event.inputs.clash_core }}"
        if ! curl -sfL "$CORE_API" | jq -e .id >/dev/null; then
          echo "::error::‚ùå Invalid core version: ${{ github.event.inputs.clash_core }}"
          echo "Available versions: https://github.com/MetaCubeX/mihomo/releases"
          exit 1
        fi

    - name: üì• Download OpenWrt SDK
      timeout-minutes: 15
      run: |
        SDK_BASE="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}"
        
        # ÂàÜÈò∂ÊÆµ‰∏ãËΩΩÂ∞ùËØï
        SDK_FILE=$(
          curl -sfL "$SDK_BASE/" | \
          grep -oE 'openwrt-sdk-[^"]+Linux-x86_64\.tar\.xz' | \
          sort -V | tail -1
        ) || true

        # Â§áÁî®ÂåπÈÖçÊñπÊ°à
        [ -z "$SDK_FILE" ] && SDK_FILE="openwrt-sdk-${{ github.event.inputs.firmware_version }}-${{ env.TARGET_DASH }}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"

        echo "üîç Selected SDK: $SDK_FILE"
        curl --retry 3 --retry-all-errors -fL -o sdk.tar.xz "$SDK_BASE/$SDK_FILE"

        # Â¢ûÂº∫Êñá‰ª∂È™åËØÅ
        {
          echo "üî¨ File Type Check..."
          file -b sdk.tar.xz | grep -q "XZ compressed data" &&
          echo "‚úÖ File type verified" &&
          echo "üß™ Integrity Check..." &&
          xz -tvv sdk.tar.xz 2>&1 | grep 'No errors detected'
        } || {
          echo "::error::‚ùå Invalid SDK file detected"
          echo "Possible issues:"
          echo "1. Network failure (Retry the job)"
          echo "2. Incorrect firmware/target combination"
          echo "3. Server-side file corruption"
          exit 1
        }

        tar -xJf sdk.tar.xz -C $BUILD_DIR --strip-components=1
        rm -f sdk.tar.xz

    - name: üíæ Prepare Plugin Source
      run: |
        cd $BUILD_DIR
        git clone --depth 1 --branch ${{ github.event.inputs.plugin_branch }} \
          https://github.com/vernesong/OpenClash package/$PLUGIN_NAME

        # Ëá™Âä®‰øÆÂ§çMakefileÊ†ºÂºè
        cd package/$PLUGIN_NAME/$PLUGIN_NAME
        sed -i 's/^    /\t/g' Makefile
        [ -f "Makefile" ] || { echo "::error::Makefile missing"; exit 1; }

        # Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ
        PLUGIN_VERSION=$(make -s -f version.mk 2>/dev/null | grep PKG_VERSION | cut -d= -f2)
        echo "PLUGIN_VERSION=${PLUGIN_VERSION:-snapshot}" >> $GITHUB_ENV

    - name: ‚öôÔ∏è Preload Mihomo Core
      run: |
        CORE_DIR="$BUILD_DIR/package/$PLUGIN_NAME/$PLUGIN_NAME/files/etc/openclash/core"
        mkdir -p $CORE_DIR

        # Â§öÈïúÂÉèÊ∫ê‰∏ãËΩΩ
        MIRRORS=(
          "https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core }}/mihomo-linux-$ARCH.gz"
          "https://mirror.ghproxy.com/https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core }}/mihomo-linux-$ARCH.gz"
        )

        for url in "${MIRRORS[@]}"; do
          if curl -sfL "$url" | gunzip > "$CORE_DIR/clash"; then
            chmod 755 "$CORE_DIR/clash"
            echo "‚úÖ Core downloaded from $url"
            break
          fi
        done

        [ -x "$CORE_DIR/clash" ] || { echo "::error::‚ùå Core download failed"; exit 1; }

    - name: üîß Configure Build
      run: |
        cd $BUILD_DIR
        cat << EOF > .config
        CONFIG_TARGET_${TARGET_NAME}=y
        CONFIG_PACKAGE_${PLUGIN_NAME}=m
        CONFIG_PACKAGE_luci-compat=y
        CONFIG_PACKAGE_luci-i18n-openclash-zh-cn=m
        EOF
        
        make defconfig
        diff -u .config.default .config || true

    - name: üè≠ Compile Package
      timeout-minutes: 30
      run: |
        cd $BUILD_DIR
        make -j$(($(nproc) + 2)) \
          V=sc \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/${PLUGIN_NAME}/compile

        # ‰∫åÊ¨°È™åËØÅ‰∫ßÁâ©
        find bin/ -name '*.ipk' | xargs -I {} sh -c 'echo "üì¶ Found: {} ($(du -h {} | cut -f1))"'

    - name: üì§ Package Artifacts
      run: |
        OUTPUT_DIR="${{ github.workspace }}/artifacts"
        mkdir -p $OUTPUT_DIR
        
        # Êî∂ÈõÜÊâÄÊúâÁõ∏ÂÖ≥Êñá‰ª∂
        find $BUILD_DIR/bin -name '*.ipk' -exec cp {} $OUTPUT_DIR \;
        
        # ÁîüÊàêÊ†°È™åÊñá‰ª∂
        cd $OUTPUT_DIR
        sha256sum *.ipk > checksums.txt
        jq -n \
          --arg target "${{ github.event.inputs.target }}" \
          --arg fw_ver "${{ github.event.inputs.firmware_version }}" \
          --arg core_ver "${{ github.event.inputs.clash_core }}" \
          --arg plugin_ver "${{ env.PLUGIN_VERSION }}" \
          '{target: $target, openwrt: $fw_ver, core: $core_ver, plugin: $plugin_ver}' \
          > build-info.json

        echo "üéâ Build artifacts ready:"
        tree -h

    - name: üöÄ Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*.ipk
          artifacts/checksums.txt
          artifacts/build-info.json
        tag_name: openclash-${{ github.event.inputs.clash_core }}-${{ env.PLUGIN_VERSION }}
        name: OpenClash ${{ github.event.inputs.clash_core }} (${ env.PLUGIN_VERSION })
        body: |
          ### Build Information
          | Component        | Version               |
          |-------------------|-----------------------|
          | Target           | `${{ github.event.inputs.target }}` |
          | OpenWrt          | `${{ github.event.inputs.firmware_version }}` |
          | Mihomo Core      | `${{ github.event.inputs.clash_core }}` |
          | Plugin Version   | `${{ env.PLUGIN_VERSION }}` |

          ### Verification
          ```bash
          sha256sum -c checksums.txt
          ```

          Built at: `$(date -u +"%Y-%m-%dT%H:%M:%SZ")`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
