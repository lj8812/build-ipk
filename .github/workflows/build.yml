name: OpenClash AutoBuild (Stable)

on:
  push:
    paths:
      - '**.yml'
      - '**.yaml'
    branches: [ "main", "master" ]

  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (示例: x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt版本'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo核心版本 (带v前缀)'
        required: true
        default: 'v1.18.0'

env:
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
    # ===================== 初始化阶段 =====================
    - name: 🛠️ 初始化工作区
      run: |
        # 正确使用 runner 上下文
        BUILD_DIR="${{ github.workspace }}/openwrt-build"
        CACHE_DIR="${{ runner.temp }}/sdk_cache"
        mkdir -p $BUILD_DIR $CACHE_DIR
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "CACHE_DIR=$CACHE_DIR" >> $GITHUB_ENV

    # ===================== 依赖安装 =====================
    - name: 📥 安装编译工具
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          aria2 xz-utils ccache \
          build-essential git python3

    # ===================== SDK下载 =====================
    - name: 🌐 下载OpenWrt SDK
      run: |
        # 使用步骤内变量
        SDK_PATH="releases/${{ inputs.firmware_version }}/targets/${{ inputs.target }}"
        SDK_URL="https://downloads.openwrt.org/$SDK_PATH"
        
        echo "🔍 正在查找 SDK 文件..."
        SDK_FILE=$(curl -sL "$SDK_URL" | grep -oE 'openwrt-sdk-.*?Linux-x86_64\.tar\.xz' | head -1)
        
        # 多镜像源下载
        MIRRORS=(
          "$SDK_URL/$SDK_FILE"
          "https://mirror.sjtu.edu.cn/openwrt/$SDK_PATH/$SDK_FILE"
        )

        for url in "${MIRRORS[@]}"; do
          echo "⬇️ 尝试下载: $url"
          if curl --retry 3 -L -o "${{ env.CACHE_DIR }}/sdk.tar.xz" "$url"; then
            if xz -t "${{ env.CACHE_DIR }}/sdk.tar.xz"; then
              echo "✅ 下载验证成功"
              exit 0
            fi
          fi
        done
        
        echo "::error::所有镜像源下载失败"
        exit 1

    # ===================== 源码准备 =====================
    - name: 💾 获取插件源码
      run: |
        cd ${{ env.BUILD_DIR }}
        git clone --depth 1 --branch master \
          https://github.com/vernesong/OpenClash package/${{ env.PLUGIN_NAME }}
        
        # Makefile格式修复
        find package/${{ env.PLUGIN_NAME }} -name Makefile -exec sed -i 's/^    /\t/g' {} +

    # ===================== 编译配置 =====================
    - name: ⚙️ 配置编译环境
      run: |
        cd ${{ env.BUILD_DIR }}
        cat > .config <<EOF
        CONFIG_TARGET_${{ inputs.target##*/ }}=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        make defconfig

    # ===================== 编译执行 =====================
    - name: 🏭 执行编译
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(($(nproc) + 2)) V=s \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/${{ env.PLUGIN_NAME }}/compile

    # ===================== 产物发布 =====================
    - name: 🚀 发布版本
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.BUILD_DIR }}/bin/packages/**/*.ipk
        tag_name: openclash-${{ inputs.clash_core }}-$(date +%Y%m%d)
        name: OpenClash Build ${{ inputs.clash_core }}
        body: |
          ### 构建信息
          - ​**架构**: ${{ inputs.target }}
          - ​**固件版本**: ${{ inputs.firmware_version }}
          - ​**核心版本**: ${{ inputs.clash_core }}
          - ​**编译时间**: `$(date -u +'%Y-%m-%dT%H:%M:%SZ')`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
