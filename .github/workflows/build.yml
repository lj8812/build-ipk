name: 编译 OpenClash 插件

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标平台/架构 (例如 x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt 版本'
        required: true
        default: '23.05.5'
      clash_core_version:
        description: 'Clash 内核版本'
        required: true
        default: '2024.05.01'

env:
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 45

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装编译依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
        gettext git libelf-dev libncurses5-dev libncursesw5-dev libssl-dev \
        python3 python3-distutils python3-setuptools unzip wget rsync subversion \
        swig time xsltproc zlib1g-dev tree jq

    - name: 设置 Python 环境
      run: |
        sudo ln -sf /usr/bin/python3 /usr/bin/python
        python --version

    - name: 解析目标参数
      id: parse_target
      run: |
        TARGET_SLUG=$(echo "${{ github.event.inputs.target }}" | sed 's/\//-/g')
        echo "TARGET_SLUG=$TARGET_SLUG" >> $GITHUB_OUTPUT
        ARCH=$(echo "${{ github.event.inputs.target }}" | cut -d'/' -f2)
        echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

    - name: 下载 OpenWrt SDK
      run: |
        SDK_BASE="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}/"
        echo "SDK 下载地址: $SDK_BASE"
        
        # 动态生成精确匹配模式
        if [[ "${{ github.event.inputs.target }}" == "x86/64" ]]; then
          PATTERN='openwrt-sdk-\d+\.\d+\.\d+-x86-64_gcc-\d+\.\d+\.\d+_musl\.Linux-x86_64\.tar\.xz'
        elif [[ "${{ github.event.inputs.target }}" == "armvirt/64" ]]; then
          PATTERN='openwrt-sdk-\d+\.\d+\.\d+-armvirt-64-gcc-\d+\.\d+\.\d+_musl\.Linux-x86_64\.tar\.xz'
        fi

        echo "使用正则表达式模式: $PATTERN"
        SDK_FILE=$(curl -s "$SDK_BASE" | grep -oP "$PATTERN" | head -n1)
        echo "匹配到的 SDK 文件: $SDK_FILE"
        
        if [ -z "$SDK_FILE" ]; then
          echo "::error::无法找到匹配的 SDK 文件"
          exit 1
        fi
        
        echo "开始下载: ${SDK_BASE}${SDK_FILE}"
        wget -q --show-progress "${SDK_BASE}${SDK_FILE}" -O openwrt-sdk.tar.xz
        
        mkdir -p openwrt
        echo "解压 SDK 文件..."
        tar -xJf openwrt-sdk.tar.xz -C openwrt --strip-components 1
        echo "SDK 准备完成"
        ls -lh openwrt

    - name: 克隆插件源码
      working-directory: openwrt/package
      run: |
        git clone --depth 1 https://github.com/lj8812/OpenClash ${{ env.PLUGIN_NAME }}
        cd ${{ env.PLUGIN_NAME }}/luci-app-openclash
        
        # 修复 Makefile 格式
        sed -i 's/^    /\t/g' Makefile
        sed -i 's/\r$//' Makefile

        # 预置 Clash 内核
        mkdir -p files/etc/openclash/core
        case "${{ steps.parse_target.outputs.ARCH }}" in
          "64")
            CORE_URL="https://release.dreamacro.workers.dev/${{ github.event.inputs.clash_core_version }}/clash-linux-amd64-${{ github.event.inputs.clash_core_version }}.gz"
            ;;
          "armv8")
            CORE_URL="https://release.dreamacro.workers.dev/${{ github.event.inputs.clash_core_version }}/clash-linux-arm64-${{ github.event.inputs.clash_core_version }}.gz"
            ;;
          *)
            echo "::error::不支持的架构: ${{ steps.parse_target.outputs.ARCH }}"
            exit 1
            ;;
        esac
        
        echo "下载内核: $CORE_URL"
        wget -q --show-progress "$CORE_URL" -O clash.gz
        gunzip clash.gz
        mv clash files/etc/openclash/core/
        chmod +x files/etc/openclash/core/clash

        # 禁用自动更新
        sed -i 's/option auto_update .*/option auto_update "0"/' root/etc/config/openclash
        sed -i 's/option release_branch .*/option release_branch "disabled"/' root/etc/config/openclash

    - name: 配置编译环境
      working-directory: openwrt
      run: |
        TARGET_CONFIG="CONFIG_TARGET_$(echo '${{ github.event.inputs.target }}' | tr / _)"
        echo "$TARGET_CONFIG=y" > .config
        echo "CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m" >> .config
        echo "CONFIG_PACKAGE_dnsmasq-full=y" >> .config
        echo "CONFIG_PACKAGE_iptables-mod-tproxy=y" >> .config
        echo "CONFIG_PACKAGE_luci-compat=y" >> .config
        make defconfig

    - name: 编译插件
      working-directory: openwrt
      run: |
        export PATH=$PATH:$GITHUB_WORKSPACE/openwrt/staging_dir/host/bin
        make -j$(nproc) package/${{ env.PLUGIN_NAME }}/compile V=s

    - name: 获取时间戳
      id: get_timestamp
      run: echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - name: 打包制品
      run: |
        mkdir -p artifacts
        find openwrt/bin/packages -name "${{ env.PLUGIN_NAME }}*.ipk" -exec cp -v {} artifacts/ \;
        cd artifacts
        for f in *.ipk; do
          new_name="openclash_$(echo '${{ github.event.inputs.target }}' | tr / -)_${{ github.event.inputs.firmware_version }}_${{ github.event.inputs.clash_core_version }}.ipk"
          echo "重命名: $f → $new_name"
          mv "$f" "$new_name"
        done
        echo "最终生成文件:"
        ls -lh

    - name: 上传制品
      uses: actions/upload-artifact@v4
      with:
        name: openclash-packages
        path: artifacts/*.ipk
        retention-days: 7

    - name: 创建 GitHub Release
      if: success()
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*.ipk
        tag_name: openclash-${{ github.event.inputs.target }}-${{ github.event.inputs.firmware_version }}-${{ github.event.inputs.clash_core_version }}
        name: OpenClash ${{ github.event.inputs.clash_core_version }} (${{ github.event.inputs.target }})
        body: |
          ### 📦 编译信息
          - ​**目标架构**: `${{ github.event.inputs.target }}`
          - ​**OpenWrt 版本**: `${{ github.event.inputs.firmware_version }}`
          - ​**Clash 内核版本**: `${{ github.event.inputs.clash_core_version }}`
          - ​**编译时间**: `${{ steps.get_timestamp.outputs.DATE }}`

          ### ⚙️ 预置功能
          ✅ 内置最新 Clash 内核  
          ✅ 禁用自动更新  
          ✅ 多架构支持
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
