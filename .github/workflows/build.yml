name: 编译 OpenClash 插件

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (x86/64 或 armvirt/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt 版本 (如 23.05.5)'
        required: true
        default: '23.05.5'
      clash_core_version:
        description: 'mihomo 内核版本 (带 v 前缀)'
        required: true
        default: 'v1.18.0'

env:
  PLUGIN_NAME: luci-app-openclash

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 90

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 安装依赖工具链
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq \
          build-essential ccache ecj fastjar file g++ gawk gettext git \
          libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-distutils python3-setuptools unzip wget rsync subversion \
          swig time xsltproc zlib1g-dev tree jq

    - name: 设置 Python 环境
      run: |
        sudo rm -f /usr/bin/python
        sudo ln -s /usr/bin/python3 /usr/bin/python
        python --version

    - name: 解析目标参数
      id: parse_target
      run: |
        TARGET_DASH=$(echo "${{ github.event.inputs.target }}" | sed 's/\//-/g')
        echo "TARGET_DASH=$TARGET_DASH" >> $GITHUB_OUTPUT
        
        case "${{ github.event.inputs.target }}" in
          "x86/64")    ARCH="amd64"  ;;
          "armvirt/64") ARCH="arm64" ;;
          *) echo "::error::不支持的架构"; exit 1 ;;
        esac
        echo "ARCH=$ARCH" >> $GITHUB_OUTPUT

    - name: 下载 OpenWrt SDK
      run: |
        SDK_BASE_URL="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}/"
        echo "🛠️ SDK 基地址: $SDK_BASE_URL"

        # 改进的文件名匹配模式
        SDK_FILE=$(curl -s "$SDK_BASE_URL" | grep -oP "openwrt-sdk-.*?-${{ steps.parse_target.outputs.TARGET_DASH }}_gcc-.*?Linux-x86_64.tar.xz" | head -n1)
        
        if [ -z "$SDK_FILE" ]; then
          echo "::error::❌ 未找到 SDK 文件，请检查以下内容："
          echo "1. 目标架构是否正确: ${{ github.event.inputs.target }}"
          echo "2. 版本是否存在: ${{ github.event.inputs.firmware_version }}"
          echo "3. 官方下载页面内容:"
          curl -s "$SDK_BASE_URL" | head -n 20
          exit 1
        fi

        SDK_URL="${SDK_BASE_URL}${SDK_FILE}"
        echo "🔗 下载地址: $SDK_URL"

        # 带重试的下载逻辑
        for i in {1..3}; do
          if wget --progress=bar:force:noscroll "$SDK_URL" -O openwrt-sdk.tar.xz; then
            echo "✅ 下载成功 (第 $i 次尝试)"
            break
          elif [ $i -eq 3 ]; then
            echo "::error::❌ 下载失败，请手动验证链接有效性"
            echo "测试命令: wget -q --spider '$SDK_URL'"
            exit 1
          else
            echo "⚠️ 下载失败，10秒后重试..."
            sleep 10
          fi
        done

        # 文件完整性校验
        if ! tar -tvJf openwrt-sdk.tar.xz >/dev/null 2>&1; then
          echo "::error::❌ 文件校验失败，可能原因："
          echo "1. 下载不完整"
          echo "2. 服务器文件损坏"
          exit 1
        fi

        mkdir -p openwrt
        tar -xJf openwrt-sdk.tar.xz -C openwrt --strip-components 1
        rm openwrt-sdk.tar.xz

    - name: 准备插件源码
      working-directory: openwrt/package
      run: |
        git clone --depth 1 --branch master https://github.com/vernesong/OpenClash.git ${{ env.PLUGIN_NAME }}
        
        cd ${{ env.PLUGIN_NAME }}/luci-app-openclash
        sed -i -e 's/^    /\t/g' -e 's/\r$//' Makefile

        # Makefile 格式验证
        echo "::group::Makefile 缩进检查"
        if grep -q '^    ' Makefile; then
          echo "❌ 检测到空格缩进，正在修复..."
          sed -i 's/^    /\t/g' Makefile
        fi
        grep -n -m 3 '^\t' Makefile || { echo "::error::Tab缩进验证失败"; exit 1; }
        echo "::endgroup::"

        # 预置 mihomo 内核
        CORE_DIR="files/etc/openclash/core"
        mkdir -p $CORE_DIR
        ARCH=${{ steps.parse_target.outputs.ARCH }}

        CORE_URLS=(
          "https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core_version }}/mihomo-linux-$ARCH-${{ github.event.inputs.clash_core_version }}.gz"
          "https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core_version }}/mihomo-linux-$ARCH.gz"
        )

        for url in "${CORE_URLS[@]}"; do
          echo "🔍 尝试下载: $url"
          if curl --output /dev/null --silent --head --fail "$url"; then
            echo "✅ 有效链接: $url"
            if wget -q --show-progress "$url" -O clash.gz; then
              if gunzip -t clash.gz; then
                gunzip clash.gz
                mv clash $CORE_DIR/
                chmod 755 $CORE_DIR/clash
                echo "🎉 内核预置成功"
                break
              else
                echo "⚠️ 压缩包损坏，尝试下一个链接..."
                rm -f clash.gz
              fi
            fi
          fi
        done

        # 禁用自动更新
        sed -i -e 's/option auto_update .*/option auto_update "0"/' \
               -e 's/option release_branch .*/option release_branch "disabled"/' root/etc/config/openclash

    - name: 配置编译环境
      working-directory: openwrt
      run: |
        cat << EOF > .config
        CONFIG_TARGET_$(echo ${{ github.event.inputs.target }} | tr '/a-z' '_A-Z')=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_iptables-mod-tproxy=y
        CONFIG_PACKAGE_luci-compat=y
        EOF
        
        make defconfig
        echo "::group::编译配置预览"
        grep -rn "CONFIG_TARGET\|CONFIG_PACKAGE" .config
        echo "::endgroup::"

    - name: 执行编译
      working-directory: openwrt
      run: |
        export PATH="$PATH:$GITHUB_WORKSPACE/openwrt/staging_dir/host/bin"
        make -j$(($(nproc) + 1)) package/${{ env.PLUGIN_NAME }}/compile V=s

        echo "::group::编译产物验证"
        find bin -name "*.ipk" -exec ls -lh {} \;
        echo "::endgroup::"

    - name: 打包输出
      run: |
        ARTIFACT_DIR="openclash_${{ steps.parse_target.outputs.TARGET_DASH }}_${{ github.event.inputs.firmware_version }}_${{ github.event.inputs.clash_core_version }}"
        mkdir -p $ARTIFACT_DIR
        find openwrt/bin/packages -name "luci-app-openclash*.ipk" -exec cp -v {} $ARTIFACT_DIR/ \;
        echo "📦 生成文件列表:"
        ls -lh $ARTIFACT_DIR

    - name: 上传制品
      uses: actions/upload-artifact@v4
      with:
        name: openclash-packages
        path: openclash_*/*.ipk
        retention-days: 7

    - name: 创建 Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: openclash-${{ steps.parse_target.outputs.TARGET_DASH }}-${{ github.event.inputs.firmware_version }}
        name: OpenClash ${{ github.event.inputs.clash_core_version }} (${{ github.event.inputs.target }})
        body: |
          ### 编译信息
          - ​**目标架构**: `${{ github.event.inputs.target }}`
          - ​**OpenWrt 版本**: ${{ github.event.inputs.firmware_version }}
          - ​**mihomo 版本**: ${{ github.event.inputs.clash_core_version }}
          - ​**编译时间**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          ### 安装说明
          ```bash
          opkg install luci-app-openclash_*.ipk
          /etc/init.d/openclash start
          ```
        files: openclash_*/*.ipk
