name: OpenClash AutoBuild (Enhanced)

on:
  push:
    branches: [ "main", "dev" ]
    paths:
      - 'luci-app-openclash/Makefile'
  workflow_dispatch:

env:
  PLUGIN_NAME: luci-app-openclash
  TARGET_ARCH: x86/64
  SDK_VERSION: 23.05.5

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    # ===================== 初始化环境 =====================
    - name: 🛠️ 初始化工作区
      run: |
        BUILD_DIR="${{ github.workspace }}/openwrt-build"
        mkdir -p $BUILD_DIR
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    # ===================== 安装依赖 =====================
    - name: 📥 安装编译工具链
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          aria2 xz-utils ccache \
          build-essential git python3 \
          libncurses-dev zlib1g-dev \
          lua5.1 liblua5.1-0-dev lua-filesystem

    # ===================== 获取版本信息 =====================
    - name: 🔍 提取版本号
      run: |
        NEW_VERSION=$(grep 'PKG_VERSION:=' ./${{ env.PLUGIN_NAME }}/Makefile | cut -d= -f2)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "当前版本: $NEW_VERSION"

    # ===================== 多源下载SDK =====================
    - name: 🌐 下载OpenWrt SDK
      run: |
        SAFE_TARGET="${TARGET_ARCH//\//-}"
        SDK_FILE="openwrt-sdk-${SDK_VERSION}-${SAFE_TARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        MIRRORS=(
          "https://downloads.openwrt.org/releases/${SDK_VERSION}/targets/${TARGET_ARCH}/${SDK_FILE}"
          "https://mirror.ghproxy.com/https://downloads.openwrt.org/releases/${SDK_VERSION}/targets/${TARGET_ARCH}/${SDK_FILE}"
          "https://op.supes.top/${SDK_FILE}"
        )

        for url in "${MIRRORS[@]}"; do
          echo "🔗 尝试下载: $url"
          if aria2c -x8 -s8 -d "$BUILD_DIR" -o "$SDK_FILE" "$url"; then
            if xz -t "$BUILD_DIR/$SDK_FILE"; then
              echo "✅ 文件验证通过"
              exit 0
            fi
            rm -f "$BUILD_DIR/$SDK_FILE"
          fi
        done

        echo "::error::❌ 所有下载源均不可用"
        exit 1

    # ===================== 准备编译环境 =====================
    - name: 💻 解压SDK
      run: |
        tar -xJf "$BUILD_DIR/openwrt-sdk-${SDK_VERSION}-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz" \
          -C $BUILD_DIR --strip-components=1

    # ===================== 构建核心工具 =====================
    - name: 🔧 编译po2lmo
      run: |
        git clone --depth 1 https://github.com/openwrt/luci $BUILD_DIR/luci
        gcc -o $BUILD_DIR/staging_dir/host/bin/po2lmo \
          $BUILD_DIR/luci/modules/luci-base/src/po2lmo.c \
          $BUILD_DIR/luci/modules/luci-base/src/sfh.c
        echo "✅ po2lmo 路径: $(which po2lmo)"

    # ===================== 编译插件 =====================
    - name: 🏭 编译OpenClash
      run: |
        cd $BUILD_DIR
        cp -rf ../${{ env.PLUGIN_NAME }} package/
        
        # 修复Makefile格式
        find package/${{ env.PLUGIN_NAME }} -name Makefile -exec sed -i 's/^    /\t/g' {} +
        
        # 生成配置
        cat > .config <<EOF
        CONFIG_TARGET_x86_64=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        
        # 执行编译
        make defconfig
        make -j$(($(nproc) + 2)) V=sc \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/${{ env.PLUGIN_NAME }}/compile

    # ===================== 发布管理 =====================
    - name: 🚀 发布版本
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.BUILD_DIR }}/bin/packages/**/*.ipk
        tag_name: v${{ env.NEW_VERSION }}
        name: OpenClash ${{ env.NEW_VERSION }}
        body: |
          ### 构建信息
          - ​**架构**: ${{ env.TARGET_ARCH }}
          - ​**SDK版本**: ${{ env.SDK_VERSION }}
          - ​**编译时间**: `$(date -u +"%Y-%m-%dT%H:%M:%SZ")`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ===================== 错误处理 =====================
    - name: 🚨 失败通知
      if: ${{ failure() }}
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `⚠️ 编译失败！错误日志：\n${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })
