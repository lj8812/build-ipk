name: OpenClash AutoBuilder (Stable)

on:
  # 触发条件：任何.yml文件变更时触发
  push:
    paths:
      - '**.yml'
      - '**.yaml'
    branches: [ "main", "master" ]

  # 保留手动触发功能
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (示例: x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt版本'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo核心版本 (带v前缀)'
        required: true
        default: 'v1.18.0'

env:
  BUILD_DIR: ${{ github.workspace }}/openwrt-build
  PLUGIN_NAME: luci-app-openclash
  CACHE_DIR: ${{ runner.temp }}/sdk_cache
  MIRROR_LIST: >
    https://downloads.openwrt.org,
    https://mirror.sjtu.edu.cn/openwrt,
    https://mirrors.tuna.tsinghua.edu.cn/openwrt,
    https://openwrt.proxy.ustclug.org

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    strategy:
      matrix:
        arch: [ 'x86/64', 'arm/armv7' ]  # 可扩展其他架构

    steps:
    # --------------------- 初始化阶段 ---------------------
    - name: 🛠️ 初始化工作区
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 📥 安装基础依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          aria2 xz-utils jq python3 python3-pip \
          libssl-dev zlib1g-dev ccache

    # --------------------- 缓存管理 ---------------------
    - name: 🗃️ SDK缓存管理
      uses: actions/cache@v3
      with:
        path: ${{ env.CACHE_DIR }}
        key: sdk-${{ matrix.arch }}-${{ inputs.firmware_version }}-v6
        restore-keys: |
          sdk-${{ matrix.arch }}-${{ inputs.firmware_version }}-
          sdk-${{ matrix.arch }}-

    # --------------------- 核心下载阶段 ---------------------
    - name: 🌐 智能下载SDK
      id: download_sdk
      run: |
        # 参数构造
        TARGET_PATH="${matrix.arch//\//-}"
        FW_VER="${{ inputs.firmware_version }}"
        CACHE_FILE="${{ env.CACHE_DIR }}/sdk_${TARGET_PATH}_${FW_VER}.tar.xz"

        # 多源下载函数
        download_with_retry() {
          local url_pattern="$1"
          for mirror in ${MIRROR_LIST//,/ }; do
            full_url="${mirror}/releases/${FW_VER}/targets/${matrix.arch}/${url_pattern}"
            echo "🔄 尝试下载: $full_url"
            if aria2c -x8 -s8 -k1M --retry-wait=30 --file-allocation=none -o sdk_temp.tar.xz "$full_url"; then
              if xz -tvv sdk_temp.tar.xz; then
                mv sdk_temp.tar.xz "$CACHE_FILE"
                echo "✅ 下载成功: ${full_url##*/}"
                return 0
              fi
            fi
          done
          return 1
        }

        # 尝试多种文件名模式
        patterns=(
          "openwrt-sdk-${FW_VER}-${TARGET_PATH}_*"
          "openwrt-sdk-${FW_VER%.*}-*-${TARGET_PATH}_*"
        )

        for pattern in "${patterns[@]}"; do
          download_with_retry "$pattern" && break
        done || {
          echo "::error::所有镜像源均失败，尝试备用源..."
          ghproxy_url="https://ghproxy.com/https://github.com/openwrt/sdk/releases/download/${FW_VER}/sdk_${TARGET_PATH}.tar.xz"
          curl -L "$ghproxy_url" -o "$CACHE_FILE" || exit 1
        }

    # --------------------- 构建准备 ---------------------
    - name: 🧱 准备构建环境
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        tar -xJf ${{ env.CACHE_DIR }}/sdk_${matrix.arch//\//-}_${{ inputs.firmware_version }}.tar.xz \
          -C ${{ env.BUILD_DIR }} --strip-components=1

    - name: 💾 获取插件源码
      run: |
        cd ${{ env.BUILD_DIR }}
        git clone --filter=blob:none --branch master \
          https://github.com/vernesong/OpenClash package/${{ env.PLUGIN_NAME }}
        
        # 格式修正
        find package/${{ env.PLUGIN_NAME }} -name Makefile -exec sed -i 's/^    /\t/g' {} +

    # --------------------- 编译阶段 ---------------------
    - name: ⚙️ 配置编译参数
      run: |
        cd ${{ env.BUILD_DIR }}
        cat > .config <<EOF
        CONFIG_TARGET_${matrix.arch##*/}_DEVICE_generic=y
        CONFIG_PACKAGE_${{ env.PLUGIN_NAME }}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        make defconfig

    - name: 🏭 执行编译
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(($(nproc) + 2)) \
          V=sc \
          CONFIG_SDK=y \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/${{ env.PLUGIN_NAME }}/compile

    # --------------------- 发布阶段 ---------------------
    - name: 🚀 发布制品
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.BUILD_DIR }}/bin/packages/**/*.ipk
        tag_name: openclash-${{ inputs.clash_core }}-$(date +%Y%m%d)
        name: OpenClash ${{ inputs.clash_core }} Build
        body: |
          ### 构建信息
          - ​**架构**: ${{ matrix.arch }}
          - ​**固件版本**: ${{ inputs.firmware_version }}
          - ​**核心版本**: ${{ inputs.clash_core }}
          - ​**编译时间**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          ### SHA256校验
          ```bash
          $(sha256sum ${{ env.BUILD_DIR }}/bin/packages/**/*.ipk)
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # --------------------- 错误处理 ---------------------
    - name: 🚨 失败通知
      if: ${{ failure() }}
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚨 构建失败! 详细信息:\n
              Job: ${context.job}\n
              错误步骤: ${{ join(toJson(steps.*.conclusion)) }}\n
              日志: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })
