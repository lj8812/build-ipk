name: OpenClash 插件编译 (含 Mihomo 内核)

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标架构 (如 x86/64)'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt 版本'
        required: true
        default: '23.05.5'
      clash_core_version:
        description: 'Mihomo 内核版本 (带 v 前缀)'
        required: true
        default: 'v1.18.0'
      plugin_branch:
        description: '插件源码分支'
        required: true
        default: 'master'

env:
  PLUGIN_NAME: luci-app-openclash
  BUILD_DIR: ${{ github.workspace }}/openwrt-build

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 45

    steps:
    - name: 🛠️ 初始化环境
      run: |
        mkdir -p $BUILD_DIR
        echo "🔧 工作目录: $BUILD_DIR"

    - name: 📥 安装编译依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential ccache ecj fastjar file g++ gawk gettext git \
          libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-distutils python3-setuptools unzip wget rsync subversion \
          swig time xsltproc zlib1g-dev tree jq p7zip-full

    - name: 🐍 配置 Python 环境
      run: |
        sudo ln -sf /usr/bin/python3 /usr/bin/python
        python -m pip install --upgrade pip
        pip install requests

    - name: 🌐 解析目标架构
      id: parse_target
      run: |
        case "${{ github.event.inputs.target }}" in
          "x86/64")    ARCH="amd64"; TARGET_CFG="x86_64" ;;
          "armvirt/64") ARCH="armv8"; TARGET_CFG="armvirt" ;;
          "arm64")     ARCH="armv8"; TARGET_CFG="arm64" ;;
          "arm/armv7") ARCH="armv7"; TARGET_CFG="armv7" ;;
          *)           ARCH="amd64"; TARGET_CFG="generic" ;;
        esac

        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "TARGET_CFG=$TARGET_CFG" >> $GITHUB_ENV
        echo "TARGET_DASH=$(echo ${{ github.event.inputs.target }} | tr '/' '-')" >> $GITHUB_ENV

    - name: 🔍 验证内核版本
      run: |
        VERSION_URL="https://api.github.com/repos/MetaCubeX/mihomo/releases/tags/${{ github.event.inputs.clash_core_version }}"
        if ! curl -sH "Accept: application/vnd.github.v3+json" "$VERSION_URL" | jq -e .id > /dev/null; then
          echo "::error::❌ 无效的 Mihomo 版本: ${{ github.event.inputs.clash_core_version }}"
          echo "可用版本列表: https://github.com/MetaCubeX/mihomo/releases"
          exit 1
        fi

    - name: 📦 下载 OpenWrt SDK
      run: |
        SDK_BASE="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}"
        SDK_PATTERN="openwrt-sdk-.*-${{ env.TARGET_DASH }}.*Linux-x86_64.tar.xz"
        
        echo "🔎 查找 SDK 文件..."
        SDK_FILE=$(curl -sL "$SDK_BASE/" | grep -oP "$SDK_PATTERN" | head -1)
        [ -z "$SDK_FILE" ] && { echo "::error::未找到 SDK 文件"; exit 1; }

        echo "⬇️ 下载: $SDK_BASE/$SDK_FILE"
        curl --retry 3 -o sdk.tar.xz "$SDK_BASE/$SDK_FILE"
        
        echo "🔒 验证文件完整性..."
        xz -t sdk.tar.xz || { echo "::error::文件损坏"; exit 1; }
        
        echo "📂 解压 SDK..."
        tar -xJf sdk.tar.xz -C $BUILD_DIR --strip-components=1
        rm sdk.tar.xz

    - name: 💾 准备插件源码
      run: |
        cd $BUILD_DIR
        git clone --depth 1 --branch ${{ github.event.inputs.plugin_branch }} \
          https://github.com/vernesong/OpenClash package/$PLUGIN_NAME
        
        cd package/$PLUGIN_NAME/$PLUGIN_NAME
        sed -i 's/^    /\t/g' Makefile
        PLUGIN_VERSION=$(grep 'PKG_VERSION:' Makefile | cut -d= -f2 | tr -d ' ')
        echo "PLUGIN_VERSION=$PLUGIN_VERSION" >> $GITHUB_ENV

    - name: ⚙️ 预置内核文件
      run: |
        CORE_DIR="$BUILD_DIR/package/$PLUGIN_NAME/$PLUGIN_NAME/files/etc/openclash/core"
        mkdir -p $CORE_DIR
        
        echo "⬇️ 下载 Mihomo ${{ github.event.inputs.clash_core_version }} 内核..."
        CORE_URL="https://github.com/MetaCubeX/mihomo/releases/download/${{ github.event.inputs.clash_core_version }}/mihomo-linux-$ARCH.gz"
        curl -L $CORE_URL | gunzip > $CORE_DIR/clash
        chmod 755 $CORE_DIR/clash

    - name: 🔧 配置编译环境
      run: |
        cd $BUILD_DIR
        echo "CONFIG_TARGET_${TARGET_CFG}=y" > .config
        echo "CONFIG_PACKAGE_$PLUGIN_NAME=m" >> .config
        make defconfig

    - name: 🏗️ 编译插件
      run: |
        cd $BUILD_DIR
        make -j$(($(nproc) + 1)) \
          V=s \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/$PLUGIN_NAME/compile

    - name: 📦 整理输出文件
      run: |
        OUTPUT_DIR="${{ github.workspace }}/output"
        mkdir -p $OUTPUT_DIR
        
        find $BUILD_DIR/bin -name "*.ipk" -exec cp {} $OUTPUT_DIR \;
        
        for ipk in $OUTPUT_DIR/*.ipk; do
          new_name="${{ env.TARGET_DASH }}_${{ github.event.inputs.firmware_version }}_${ipk##*/}"
          mv "$ipk" "$OUTPUT_DIR/$new_name"
        done

        echo "📄 生成版本信息..."
        jq -n \
          --arg target "${{ github.event.inputs.target }}" \
          --arg fw_ver "${{ github.event.inputs.firmware_version }}" \
          --arg core_ver "${{ github.event.inputs.clash_core_version }}" \
          --arg plugin_ver "${{ env.PLUGIN_VERSION }}" \
          '{target: $target, firmware: $fw_ver, core: $core_ver, plugin: $plugin_ver}' \
          > $OUTPUT_DIR/build-info.json

    - name: 🚀 发布 Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          output/*
        tag_name: openclash-${{ github.event.inputs.clash_core_version }}-${{ env.PLUGIN_VERSION }}
        name: OpenClash ${{ github.event.inputs.clash_core_version }}
        body: |
          ### 编译信息
          - ​**架构**: `${{ github.event.inputs.target }}`
          - ​**OpenWrt**: `${{ github.event.inputs.firmware_version }}`
          - ​**Mihomo**: `${{ github.event.inputs.clash_core_version }}`
          - ​**插件版本**: `${{ env.PLUGIN_VERSION }}`
          - ​**编译时间**: `$(date -u +"%Y-%m-%d %H:%M:%S UTC")`

          ### 文件清单
          ```json
          $(cat output/build-info.json)
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
