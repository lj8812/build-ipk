name: OpenClash 稳定编译 (修复版)

on:
  workflow_dispatch:
    inputs:
      firmware_version:
        description: 'OpenWrt版本'
        required: true
        default: '23.05.5'
      clash_core:
        description: 'Mihomo核心版本'
        required: true
        default: 'v1.18.0'

env:
  PLUGIN_NAME: luci-app-openclash
  TARGET: "x86/64"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    # ===================== 初始化环境 =====================
    - name: 🛠️ 初始化工作区
      run: |
        BUILD_DIR="${{ github.workspace }}/openwrt-build"
        CACHE_DIR="/tmp/sdk_cache"
        mkdir -p $BUILD_DIR $CACHE_DIR
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "CACHE_DIR=$CACHE_DIR" >> $GITHUB_ENV

    # ===================== 安装基础依赖 =====================
    - name: 📥 安装编译工具链
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          aria2 xz-utils ccache \
          build-essential git python3 \
          libncurses-dev zlib1g-dev \
          lua5.1 liblua5.1-0-dev lua-filesystem \
          gcc make

    # ===================== 构建po2lmo工具 =====================
    - name: 🔧 编译po2lmo转换器
      run: |
        # 克隆LuCI源码
        git clone --depth 1 https://github.com/openwrt/luci
        cd luci
        
        # 直接编译po2lmo
        mkdir -p build
        gcc -o build/po2lmo modules/luci-base/src/po2lmo.c
        
        # 安装到系统路径
        sudo install -m 0755 build/po2lmo /usr/local/bin/
        echo "✅ po2lmo版本: $(po2lmo --version || echo '未获取版本')"

    # ===================== 下载SDK核心 =====================
    - name: 🌐 多源下载SDK
      run: |
        FW_VER="${{ inputs.firmware_version }}"
        SAFE_TARGET="x86-64"
        SDK_FILE="openwrt-sdk-${FW_VER}-${SAFE_TARGET}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        MIRRORS=(
          "https://downloads.openwrt.org/releases/${FW_VER}/targets/x86/64/${SDK_FILE}"
          "https://mirror.ghproxy.com/https://downloads.openwrt.org/releases/${FW_VER}/targets/x86/64/${SDK_FILE}"
          "https://op.supes.top/${SDK_FILE}"
        )

        for url in "${MIRRORS[@]}"; do
          echo "🔗 尝试下载: $url"
          if aria2c -x8 -s8 -k1M -d "$CACHE_DIR" -o "$SDK_FILE" "$url"; then
            if xz -t "$CACHE_DIR/$SDK_FILE"; then
              echo "✅ 文件验证通过"
              exit 0
            fi
            rm -f "$CACHE_DIR/$SDK_FILE"
          fi
          sleep 10
        done

        echo "::error::❌ 所有下载源均不可用"
        exit 1

    # ===================== 准备编译环境 =====================
    - name: 💻 解压SDK
      run: |
        tar -xJf "$CACHE_DIR/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz" \
          -C $BUILD_DIR --strip-components=1

    - name: 📂 准备插件源码
      run: |
        cd $BUILD_DIR
        git clone --depth 1 --branch master \
          https://github.com/vernesong/OpenClash package/$PLUGIN_NAME
        
        # 预处理步骤
        (cd package/$PLUGIN_NAME && \
          find . -name Makefile -exec sed -i 's/^    /\t/g' {} + && \
          po2lmo po/zh-cn/openclash.zh-cn.po openclash.zh-cn.lmo)

    # ===================== 编译配置 =====================
    - name: ⚙️ 生成配置
      run: |
        cd $BUILD_DIR
        cat > .config <<EOF
        CONFIG_TARGET_x86_64=y
        CONFIG_PACKAGE_${PLUGIN_NAME}=m
        CONFIG_PACKAGE_luci-compat=y
        EOF
        make defconfig

    # ===================== 执行编译 =====================
    - name: 🏭 核心编译流程
      run: |
        cd $BUILD_DIR
        PATH="/usr/local/bin:$PATH" make -j$(($(nproc) + 2)) \
          V=sc \
          CONFIG_DEBUG_SECTION_MISMATCH=y \
          package/$PLUGIN_NAME/compile

    # ===================== 发布管理 =====================
    - name: 🚀 发布制品
      uses: softprops/action-gh-release@v2
      with:
        files: |
          $BUILD_DIR/bin/packages/**/*.ipk
        tag_name: openclash-${{ inputs.clash_core }}-$(date +%Y%m%d)
        body: |
          ### 编译信息
          - ​**架构**: x86/64
          - ​**OpenWrt版本**: ${{ inputs.firmware_version }}
          - ​**核心版本**: ${{ inputs.clash_core }}
          - ​**编译时间**: `$(date -u +"%Y-%m-%dT%H:%M:%SZ")`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ===================== 错误处理 =====================
    - name: 🚨 失败通知
      if: ${{ failure() }}
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `⚠️ 编译失败！错误日志：\n${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })
